name: Convert Markdown to HTML and PDF

on:
  push:
    branches: [ main, master ]

# ワークフローに明示的な権限を設定
permissions:
  contents: write

jobs:
  convert-documents:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm init -y
          npm install --save marked puppeteer@19.7.0

      - name: Install Japanese fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            fonts-ipafont-gothic \
            fonts-ipafont-mincho \
            fonts-noto-cjk \
            fonts-noto-cjk-extra \
            language-pack-ja \
            fonts-takao \
            fonts-mplus

      - name: Configure locale
        run: |
          sudo locale-gen ja_JP.UTF-8
          echo "LANG=ja_JP.UTF-8" | sudo tee -a /etc/environment
          echo "LC_ALL=ja_JP.UTF-8" | sudo tee -a /etc/environment

      - name: Create conversion script
        run: |
          cat > convert.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          const marked = require('marked');
          const puppeteer = require('puppeteer');
          const { execSync } = require('child_process');

          // ルートのstyle.cssの存在確認
          const rootStyleExists = fs.existsSync('./style.css');
          const rootStyleContent = rootStyleExists ? fs.readFileSync('./style.css', 'utf-8') : '';

          // ディレクトリを再帰的に作成
          function ensureDirExists(dirPath) {
            if (!fs.existsSync(dirPath)) {
              fs.mkdirSync(dirPath, { recursive: true });
            }
          }

          // ファイルをコピーする関数
          function copyFile(source, target) {
            try {
              ensureDirExists(path.dirname(target));
              fs.copyFileSync(source, target);
              return true;
            } catch (error) {
              console.error(`ファイルコピーエラー ${source} -> ${target}:`, error);
              return false;
            }
          }

          // 日付を日本語形式（YYYY/MM/DD）にフォーマット
          function formatJapaneseDate(date) {
            const d = new Date(date);
            const year = d.getFullYear();
            const month = String(d.getMonth() + 1).padStart(2, '0');
            const day = String(d.getDate()).padStart(2, '0');
            return `${year}/${month}/${day}`;
          }

          // Markdownから画像パスを抽出
          function extractImagesFromMarkdown(mdContent) {
            const imageRegex = /!\[[^\]]*\]\(([^)]+)\)/g;
            const images = [];
            let match;
            
            while ((match = imageRegex.exec(mdContent)) !== null) {
              images.push(match[1]);
            }
            
            return images;
          }

          // HTMLから画像パスを抽出
          function extractImagesFromHtml(htmlContent) {
            const imageRegex = /<img[^>]+src="([^"]+)"[^>]*>/g;
            const images = [];
            let match;
            
            while ((match = imageRegex.exec(htmlContent)) !== null) {
              // 外部URLやdata URIは除外
              const src = match[1];
              if (!src.startsWith('http') && !src.startsWith('//') && !src.startsWith('data:')) {
                images.push(src);
              }
            }
            
            return images;
          }

          // マークダウンをHTMLに変換
          function convertToHtml(mdFile, outputHtmlPath) {
            try {
              console.log(`変換中: ${mdFile} -> HTML`);
              const mdContent = fs.readFileSync(mdFile, 'utf-8');
              const mdDirectory = path.dirname(mdFile);
              const outputDirectory = path.dirname(outputHtmlPath);
              
              // マークダウンから画像パスを抽出
              const mdImages = extractImagesFromMarkdown(mdContent);
              
              // 抽出した画像ファイルをコピー
              for (const imgPath of mdImages) {
                const absoluteImgPath = path.resolve(mdDirectory, imgPath);
                const relativeToRoot = path.relative('.', absoluteImgPath);
                const outputImgPath = path.join('output/html', relativeToRoot);
                
                console.log(`画像をコピー: ${absoluteImgPath} -> ${outputImgPath}`);
                ensureDirExists(path.dirname(outputImgPath));
                
                if (fs.existsSync(absoluteImgPath)) {
                  copyFile(absoluteImgPath, outputImgPath);
                } else {
                  console.warn(`警告: 画像が見つかりません: ${absoluteImgPath}`);
                }
              }
              
              // マークダウンをHTMLに変換
              const html = marked.parse(mdContent);
              
              // ルートへの相対パスを計算
              const depth = path.relative('output/html', outputDirectory).split(path.sep).length;
              const rootPath = depth > 0 ? '../'.repeat(depth) : './';
              
              const styledHtml = `
                <!DOCTYPE html>
                <html lang="ja">
                <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>${path.basename(mdFile, '.md')}</title>
                  ${rootStyleExists ? `<link rel="stylesheet" href="${rootPath}style.css">` : ''}
                  <style>
                    @font-face {
                      font-family: 'IPAGothic';
                      src: local('IPAGothic');
                    }
                    @font-face {
                      font-family: 'IPAMincho';
                      src: local('IPAMincho');
                    }
                    html, body {
                      font-family: "IPAGothic", "Noto Sans CJK JP", "Hiragino Kaku Gothic ProN", "Meiryo", sans-serif;
                      line-height: 1.8;
                      padding: 20px;
                      max-width: 800px;
                      margin: 0 auto;
                    }
                    pre {
                      background-color: #f6f8fa;
                      border-radius: 3px;
                      padding: 16px;
                      overflow: auto;
                    }
                    code {
                      font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
                      background-color: rgba(27, 31, 35, 0.05);
                      border-radius: 3px;
                      padding: 0.2em 0.4em;
                    }
                    pre code {
                      background-color: transparent;
                      padding: 0;
                    }
                    blockquote {
                      border-left: 4px solid #ddd;
                      padding-left: 16px;
                      color: #555;
                      margin-left: 0;
                    }
                    img {
                      max-width: 100%;
                      height: auto;
                    }
                    table {
                      border-collapse: collapse;
                      width: 100%;
                    }
                    table, th, td {
                      border: 1px solid #ddd;
                    }
                    th, td {
                      padding: 8px 12px;
                    }
                    th {
                      background-color: #f6f8fa;
                    }
                    @media print {
                      @page {
                        size: A4;
                        margin: 0;
                      }
                      body {
                        max-width: none;
                        padding: 0;
                      }
                    }
                  </style>
                </head>
                <body>
                  ${html}
                </body>
                </html>
              `;
              
              // HTMLから画像パスを再確認
              const htmlImages = extractImagesFromHtml(html);
              for (const imgPath of htmlImages) {
                if (!mdImages.includes(imgPath)) {
                  // マークダウンから抽出されなかった画像があれば追加でコピー
                  const absoluteImgPath = path.resolve(mdDirectory, imgPath);
                  const relativeToRoot = path.relative('.', absoluteImgPath);
                  const outputImgPath = path.join('output/html', relativeToRoot);
                  
                  console.log(`追加画像をコピー: ${absoluteImgPath} -> ${outputImgPath}`);
                  ensureDirExists(path.dirname(outputImgPath));
                  
                  if (fs.existsSync(absoluteImgPath)) {
                    copyFile(absoluteImgPath, outputImgPath);
                  }
                }
              }
              
              fs.writeFileSync(outputHtmlPath, styledHtml);
              return true;
            } catch (error) {
              console.error(`エラー: ${mdFile} の処理中:`, error);
              return false;
            }
          }

          // PDFを生成する関数（2つの方法を実装）
          async function generatePDF(htmlPath, pdfPath) {
            // まずwkhtmltopdfを試す（ヘッダー/フッターの表示が確実）
            try {
              console.log(`wkhtmltopdfでPDF生成: ${htmlPath}`);
              
              // 必要なディレクトリを作成
              const pdfDir = path.dirname(pdfPath);
              ensureDirExists(pdfDir);
              
              // 画像をコピー
              const htmlContent = fs.readFileSync(htmlPath, 'utf-8');
              const htmlDir = path.dirname(htmlPath);
              const htmlImages = extractImagesFromHtml(htmlContent);
              for (const imgPath of htmlImages) {
                const htmlImgPath = path.resolve(htmlDir, imgPath);
                const pdfImgPath = path.resolve(pdfDir, imgPath);
                
                if (fs.existsSync(htmlImgPath)) {
                  ensureDirExists(path.dirname(pdfImgPath));
                  copyFile(htmlImgPath, pdfImgPath);
                }
              }
              
              // 日本語形式の日付とタイトル
              const currentDate = formatJapaneseDate(new Date());
              const title = path.basename(htmlPath, '.html');
              
              // wkhtmltopdfコマンドの設定
              const command = `wkhtmltopdf \
                --encoding utf-8 \
                --javascript-delay 1000 \
                --no-stop-slow-scripts \
                --page-size A4 \
                --enable-local-file-access \
                --margin-top 20 \
                --margin-bottom 20 \
                --margin-left 0 \
                --margin-right 0 \
                --disable-smart-shrinking \
                --zoom 0.98 \
                --header-left "${title}" \
                --header-right "${currentDate}" \
                --header-line \
                --header-spacing 5 \
                --header-font-name "IPAGothic" \
                --header-font-size 10 \
                --footer-right "ページ [page]/[topage]" \
                --footer-spacing 5 \
                --footer-line \
                --footer-font-name "IPAGothic" \
                --footer-font-size 10 \
                "${htmlPath}" "${pdfPath}"`;
              
              execSync(command);
              
              if (fs.existsSync(pdfPath) && fs.statSync(pdfPath).size > 0) {
                console.log(`wkhtmltopdfでPDF生成成功: ${pdfPath}`);
                return true;
              } else {
                console.error(`wkhtmltopdfでPDF生成失敗`);
                throw new Error('wkhtmltopdf failed');
              }
            } catch (error) {
              console.error(`wkhtmltopdfエラー: ${error}`);
              
              // wkhtmltopdfが失敗した場合、Puppeteerを試す
              try {
                console.log(`Puppeteerを使用してPDF生成: ${htmlPath}`);
                
                // HTML内容を読み込み
                const htmlContent = fs.readFileSync(htmlPath, 'utf-8');
                const title = path.basename(htmlPath, '.html');
                
                // ブラウザを起動
                const browser = await puppeteer.launch({
                  headless: 'new',
                  args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-gpu',
                    '--font-render-hinting=none'
                  ]
                });
                
                const page = await browser.newPage();
                
                // 現在の日付
                const currentDate = formatJapaneseDate(new Date());
                
                // ヘッダー/フッターを含むPDF用HTML
                const contentHtml = `
                  <!DOCTYPE html>
                  <html lang="ja">
                  <head>
                    <meta charset="UTF-8">
                    <title>${title}</title>
                    <style>
                      @font-face {
                        font-family: 'IPAGothic';
                        src: local('IPAGothic');
                      }
                      @font-face {
                        font-family: 'Noto Sans CJK JP';
                        src: local('Noto Sans CJK JP');
                      }
                      html, body {
                        width: 100%;
                        margin: 0;
                        padding: 0;
                        font-family: "IPAGothic", "Noto Sans CJK JP", sans-serif !important;
                      }
                      .pdf-content {
                        padding: 10px 20px;
                        box-sizing: border-box;
                      }
                      /* ルートのスタイル */
                      ${rootStyleContent}
                      /* HTMLから抽出したスタイル */
                      ${htmlContent.match(/<style>([\s\S]*?)<\/style>/)?.[1] || ''}
                    </style>
                  </head>
                  <body>
                    <div class="pdf-content">
                      ${htmlContent.match(/<body>([\s\S]*?)<\/body>/)?.[1] || ''}
                    </div>
                  </body>
                  </html>
                `;
                
                // 一時ファイルに保存
                const tempHtmlPath = `${htmlPath}.temp.html`;
                fs.writeFileSync(tempHtmlPath, contentHtml);
                
                await page.goto(`file://${path.resolve(tempHtmlPath)}`, { 
                  waitUntil: 'networkidle0',
                  timeout: 60000 
                });
                
                // 確実に日本語フォントを適用
                await page.evaluate(() => {
                  document.body.style.fontFamily = '"IPAGothic", "Noto Sans CJK JP", sans-serif';
                });
                
                // PDF生成 - ヘッダーとフッター用に適切な余白を設定
                await page.pdf({
                  path: pdfPath,
                  format: 'A4',
                  printBackground: true,
                  displayHeaderFooter: true,
                  headerTemplate: `
                    <div style="width: 100%; font-size: 10pt; font-family: 'IPAGothic', 'Noto Sans CJK JP', sans-serif; 
                         padding: 5px 20px; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between;">
                      <div style="margin-left: 10px;">${title}</div>
                      <div style="margin-right: 10px;">${currentDate}</div>
                    </div>
                  `,
                  footerTemplate: `
                    <div style="width: 100%; font-size: 10pt; font-family: 'IPAGothic', 'Noto Sans CJK JP', sans-serif; 
                         padding: 5px 20px; border-top: 1px solid #ddd; text-align: right;">
                      <div style="margin-right: 10px;"><span class="pageNumber"></span>/<span class="totalPages"></span></div>
                    </div>
                  `,
                  // 注意: ヘッダー/フッターを表示するために必要な上下のマージンを設定
                  margin: {
                    top: '70px',     // ヘッダー用
                    bottom: '70px',  // フッター用
                    left: '0px',     // 左右はゼロ
                    right: '0px'
                  }
                });
                
                // 一時ファイル削除
                fs.unlinkSync(tempHtmlPath);
                
                await browser.close();
                
                if (fs.existsSync(pdfPath) && fs.statSync(pdfPath).size > 0) {
                  console.log(`Puppeteerでのバックアップ生成成功: ${pdfPath}`);
                  return true;
                } else {
                  console.error(`Puppeteerでもバックアップ生成失敗`);
                  return false;
                }
              } catch (puppeteerError) {
                console.error(`PuppeteerでのバックアップエラーB: ${puppeteerError}`);
                return false;
              }
            }
          }

          // マークダウンファイルを処理
          async function processMarkdownFiles() {
            // 出力ディレクトリを作成
            ensureDirExists('output/html');
            ensureDirExists('output/pdf');
            
            // style.cssがあれば出力ディレクトリにコピー
            if (rootStyleExists) {
              console.log('style.cssをコピーしています...');
              copyFile('./style.css', './output/html/style.css');
              copyFile('./style.css', './output/pdf/style.css');
            }
            
            // マークダウンファイルを検索
            const getFiles = (dir, ext, files = []) => {
              const entries = fs.readdirSync(dir, { withFileTypes: true });
              
              for (const entry of entries) {
                const fullPath = path.join(dir, entry.name);
                
                if (entry.isDirectory() && entry.name !== 'node_modules' && entry.name !== '.git' && entry.name !== 'output') {
                  getFiles(fullPath, ext, files);
                } else if (entry.isFile() && entry.name.endsWith(ext)) {
                  files.push(fullPath);
                }
              }
              
              return files;
            };

            const mdFiles = getFiles('.', '.md');
            console.log(`${mdFiles.length}個のマークダウンファイルを検出しました`);
            
            const htmlFiles = [];
            const pdfFiles = [];

            // 各マークダウンファイルを処理
            for (const mdFile of mdFiles) {
              const baseName = path.basename(mdFile, '.md');
              const relPath = path.relative('.', path.dirname(mdFile));
              let outputDir = relPath;
              
              // HTML出力先の設定
              const htmlPath = path.join('output/html', outputDir, `${baseName}.html`);
              ensureDirExists(path.dirname(htmlPath));
              
              // PDF出力先の設定
              const pdfPath = path.join('output/pdf', outputDir, `${baseName}.pdf`);
              ensureDirExists(path.dirname(pdfPath));
              
              // HTMLに変換
              if (convertToHtml(mdFile, htmlPath)) {
                const displayPath = path.join(outputDir, baseName).replace(/\\/g, '/');
                htmlFiles.push({ name: displayPath, path: htmlPath.replace(/\\/g, '/') });
                
                // PDFを生成
                const pdfSuccess = await generatePDF(htmlPath, pdfPath);
                if (pdfSuccess) {
                  pdfFiles.push({ name: displayPath, path: pdfPath.replace(/\\/g, '/') });
                }
              }
            }

            // index.htmlを生成
            const indexHtml = `
            <!DOCTYPE html>
            <html lang="ja">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>ドキュメント一覧</title>
              <style>
                html, body {
                  font-family: "Hiragino Kaku Gothic ProN", "ヒラギノ角ゴ ProN W3", "Meiryo", "メイリオ", "MS PGothic", "MS Pゴシック", "Noto Sans CJK JP", sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                }
                h1 {
                  text-align: center;
                  margin-bottom: 30px;
                }
                .section {
                  margin-bottom: 30px;
                }
                .file-list {
                  list-style-type: none;
                  padding: 0;
                }
                .file-list li {
                  margin: 8px 0;
                  padding: 12px;
                  background-color: #f5f5f5;
                  border-radius: 4px;
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                }
                .file-list a {
                  text-decoration: none;
                  color: #0366d6;
                  padding: 4px 8px;
                  border-radius: 3px;
                }
                .file-list a:hover {
                  text-decoration: underline;
                  background-color: rgba(3, 102, 214, 0.1);
                }
                .formats {
                  display: flex;
                  gap: 15px;
                }
                .pdf-link {
                  color: #d64541;
                }
              </style>
            </head>
            <body>
              <h1>ドキュメント一覧</h1>
              
              <div class="section">
                <ul class="file-list">
                  ${htmlFiles.map(file => {
                    const pdfFile = pdfFiles.find(pdf => pdf.name === file.name);
                    return `
                      <li>
                        <span>${file.name}</span>
                        <div class="formats">
                          <a href="${file.path}" target="_blank">HTML</a>
                          ${pdfFile ? `<a href="${pdfFile.path}" class="pdf-link" target="_blank">PDF</a>` : ''}
                        </div>
                      </li>
                    `;
                  }).join('\n')}
                </ul>
              </div>
            </body>
            </html>
            `;

            fs.writeFileSync('index.html', indexHtml);
            console.log('すべてのファイルへのリンクを含むindex.htmlを生成しました');
          }

          // 非同期処理の実行
          (async () => {
            await processMarkdownFiles();
          })();
          EOL

      - name: Install wkhtmltopdf as fallback
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf xvfb
          echo '#!/bin/bash
          xvfb-run -a -s "-screen 0 1280x1024x24" wkhtmltopdf "$@"' | sudo tee /usr/local/bin/wkhtmltopdf-xvfb
          sudo chmod +x /usr/local/bin/wkhtmltopdf-xvfb
          sudo ln -sf /usr/local/bin/wkhtmltopdf-xvfb /usr/local/bin/wkhtmltopdf

      - name: Convert files
        run: node convert.js

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Commit changes
        run: |
          git add output/ index.html
          git commit -m "Convert Markdown to HTML and PDF [automated]" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF#refs/heads/}
