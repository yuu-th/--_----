
## LLM向けインストラクション：資料作成ガイド

**ドキュメントの目的と対象読者:**

このインストラクションは、プログラミング初学者（特にプログラミングに興味のある高専生などを想定）に向けた、親しみやすく実践的な入門資料シリーズを作成するためのものです。読者が挫折せずに学習を進められ、最終的には自力でプログラミングできる基礎技術を習得できるよう支援することを目的とします。

**全体のトーンとスタイル:**

* **指導的かつ共感的**: 読者を励まし、学習のモチベーションを高める言葉遣いを心がけてください。例：「一緒に頑張りましょう！」「ここは大事なポイントですよ」。
* **親しみやすい先輩風**: 経験豊富な先輩が後輩に丁寧に、時には少し砕けた言葉も交えながら教えるようなスタイルを意識してください。堅苦しさを避け、読者が質問しやすい雰囲気を作ります。例：「心配しないでください、ここはこうすれば大丈夫です！」「ちょっと面倒かもしれませんが、ここを乗り越えればぐっと楽になりますよ」。
* **実践重視**: 理論だけでなく、読者が実際に手を動かして学ぶことを促す記述を重視してください。具体的な操作手順やコマンド例を豊富に盛り込みます。
* **経験に基づくアドバイスの挿入**: 「個人的な経験から言うと〜」「私が初心者の頃は〜で苦労しましたが、〜を意識すると良いでしょう」のように、執筆者自身の経験や具体的な知見を適度に盛り込み、説得力と共感を高めます。
* **読者への配慮**: 専門用語には平易な解説を加えたり、「今は完全に理解できなくても大丈夫です」といったフォローを入れたりしてください。また、困ったときの相談先として `[特定の担当者名や連絡先、コミュニティ名]` のようなプレースホルダーを適宜使用し、具体的なサポート体制を示唆できるようにします。

**必須構成要素 (Markdown形式):**

1. **タイトル**: `# <メインタイトル>` (例: `# 環境構築、Python導入・入門`)
2. **導入文**:
    * シリーズ全体の目的（例: AIを動かすためのPython学習）。
    * 扱う技術（Python）の重要性や魅力（例: 様々な分野で使われ、汎用性が高い）。
    * 当該回の学習内容に対する心構えや励まし（例: 「今回は少し退屈かもしれませんが、ここが基礎になるので頑張りましょう！」）。
3. **目次**:
    * `## 目次` という見出し。
    * その下に、その回の主要セクションを番号付きリストで記述。
4. **セクション区切り**: 主要なセクション間には `---` を入れて区切ります。
5. **主要セクション**:
    * `## <番号>. <セクションタイトル>` (例: `## 1. Pythonのインストール`)
6. **サブセクション**:
    * `### <サブセクションタイトル>` (例: `### Visual Studio Code (VSCode) の概要とインストール`)
7. **本文記述のルール**:
    * **段落**: 各情報は分かりやすい段落に分けて記述します。
    * **強調**: 重要なキーワード、注意点、ファイル名、UI上のボタン名などは `**太字**` で強調します。
    * **手順説明**: 操作手順は番号付きリストや箇条書きで明確に示します。
    * **画像挿入指示**: 画像を挿入すべき箇所には `![alt text](image-XXX.png)` の形式でプレースホルダーを記述します。`alt text` には、その画像が何を示しているのか具体的な説明（例: 「VSCodeの『フォルダーを開く』ダイアログのスクリーンショット」）を記述してください。`image-XXX.png` の `XXX` は連番や内容を示す単語にします。
    * **コードブロック**:
        * Pythonコード: ` ```python ... ``` `
        * ターミナルコマンド: ` ```bash ... ``` `
        * コードブロックの前後には、それが何をするコードなのか、どのように実行するのかといった説明を加えます。
    * **注意点・ヒント**: 「**注意:**」「**ポイント:**」「個人的には〜」といった形で、補足情報やアドバイスを適宜挿入します。
    * **口語表現**: 「〜なので、〜してくださいね。」「〜ということを覚えておきましょう。」「〜というわけです。」のような、少しくだけた、語りかけるような口調を適度に用います。
8. **演習セクション**:
    * `## ✏️ 本日の演習` という見出し。
    * その下に、その回で学んだことを実践するための具体的な課題を番号付きリストで提示します。
9. **まとめと次回予告**:
    * その回の学習内容の簡単な振り返り。
    * 読者への励ましの言葉。
    * 次回の学習内容の簡単な紹介。
    * 例: 「今回は〜について学びましたね。実際に手を動かしてみることで理解が深まります。次回は〜に挑戦しますので、お楽しみに！」

**特有の表現・フレーズの例とニュアンス:**

* **Pythonインストール時のPATH設定の重要性**: 「『Add Python to PATH』は**必ず**チェックしてください。これを忘れると後で本当に面倒なことになりますよ！」のように、強い言葉で注意を促し、その理由も伝える。
* **ダウンロード先の指示**: 公式サイト以外を推奨する場合、「公式サイトは少し分かりにくいかもしれないので、こちらの（信頼できる）リンクからどうぞ。（変なサイトじゃないので心配しないでくださいね！）」のように、理由と安心感を添える。
* **VSCodeのフォルダ作成場所の具体例**: 「デスクトップに `python_study` という名前でフォルダを作ってみましょう」のように、具体的な場所と名前を例示する。
* **VSCode拡張機能の推奨**: 「Python開発にはMicrosoft製の『Python』拡張機能が**必須**です。これがないと始まらないくらい便利なので、必ずインストールしてくださいね」のように、その必要性を強く訴える。
* **`print()`関数の説明**: 「`print()`は、コンピュータに『これを表示して！』とお願いする魔法の呪文みたいなものです。カッコの中に表示したいものを書くんですよ。」のように、初学者にもイメージしやすい比喩を用いる。また、「（関数については後で詳しくやりますから、今は『おまじない』だと思っておけばOKです！）」のようなフォローも入れる。
* **コメントの重要性**: 「コメントは未来の自分へのメッセージであり、チームメイトへの思いやりです。面倒くさがらずに書く習慣をつけると、後で絶対に自分を褒めてあげたくなりますよ。これは経験上、間違いありません！」のように、メリットと経験談を交えて説得力を持たせる。
* **ヘルプの案内**: 「もし途中で分からなくなったり、エラーが出たりしたら、遠慮なく `[特定の担当者名やチャットチャンネル]` で質問してくださいね。みんなで助け合いましょう！」

**最終チェックポイント:**

* 全体を通して、読者が「自分にもできそう」「プログラミングって面白いかも」と感じられるような、前向きでサポートフルな雰囲気が出ていますか？
* 専門用語が説明なしに使われていませんか？
* 手順説明は具体的で、読者が迷わず実行できる内容になっていますか？
* 画像挿入指示のalt textは、画像の内容を適切に表していますか？
* 演習問題は、その回の学習内容を効果的に復習できるものになっていますか？

---

以上のインストラクションまた、WEB班７_JS_序章.md、やWEB班８_JS_最初の導入.md の書きぶりや口調などにも従い、この計画.mdの**第１部の第２章**を実装する。ただし、全体も踏まえて必ず抜けがないように、網羅的になるようにする。学習者の立場に立って考える。具体的な内容を作成してみて、私に提案してみて